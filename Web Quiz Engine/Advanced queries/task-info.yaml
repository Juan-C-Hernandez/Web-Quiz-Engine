type: edu
custom_name: stage6
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.FatalError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 0,1),
            () -> testAllQuizzes(0, 0,2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 0,1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 0,2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),
            () -> testCompletedQuizzesNoAuth(),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),
            () -> testCompletedQuizzesFakeAuth(),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 2),


            // Check completed
            () -> testCompletedQuizzes(1, 1, 0 ,0, quizIds[0]),
            () -> testCompletedQuizzes(1, 2, 0, 0, quizIds[1]),


            // Test database save
            () -> testAllQuizzes(2, 0, 1),
            () -> testAllQuizzes(2, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 0,1),
            () -> testAllQuizzes(2, 0,2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 2),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),


            // Check completed
            () -> testCompletedQuizzes(2, 1, 0 ,1, quizIds[0]),
            () -> testCompletedQuizzes(2, 1, 0 ,0, quizIds[1]),

            () -> testCompletedQuizzes(2, 2, 0, 1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 0, 0, quizIds[0]),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 0,2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Check completed
            () -> testCompletedQuizzes(5, 1, 0 ,4, quizIds[0]),
            () -> testCompletedQuizzes(5, 1, 0 ,3, quizIds[1]),
            () -> testCompletedQuizzes(5, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(5, 1, 0 ,1, quizIds[5]),
            () -> testCompletedQuizzes(5, 1, 0 ,0, quizIds[5]),

            () -> testCompletedQuizzes(6, 2, 0, 5, quizIds[1]),
            () -> testCompletedQuizzes(6, 2, 0, 4, quizIds[0]),
            () -> testCompletedQuizzes(6, 2, 0, 3, quizIds[2]),
            () -> testCompletedQuizzes(6, 2, 0, 2, quizIds[3]),
            () -> testCompletedQuizzes(6, 2, 0, 1, quizIds[6]),
            () -> testCompletedQuizzes(6, 2, 0, 0, quizIds[6]),


            // Test pagination completed quizzes
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 1),

            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 2),

            () -> testCompletedQuizzes(10, 1, 0 ,0, quizIds[6]),
            () -> testCompletedQuizzes(10, 1, 0 ,1, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,3, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,4, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,5, quizIds[4]),
            () -> testCompletedQuizzes(1, 1, 1 ,0, quizIds[0]),

            () -> testCompletedQuizzes(10, 2, 0 ,0, quizIds[5]),
            () -> testCompletedQuizzes(10, 2, 0 ,1, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,2, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,3, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,4, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,5, quizIds[3]),
            () -> testCompletedQuizzes(2, 2, 1 ,1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 1 ,0, quizIds[0]),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 0,1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 0,2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),


            // Test pagination all quizzes
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testAllQuizzes(10, 0,1),
            () -> testAllQuizzes(10, 0,2),
            () -> testAllQuizzes(5, 1,1),
            () -> testAllQuizzes(5, 1,2),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpRequest req = post(url, getPrettyJson(json));
            HttpResponse resp = req.send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesNoAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesFakeAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int page, int user) {
            String url = "/api/quizzes";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content", isArray(count, isObject()
                        .value("id", isInteger())
                        .value("title", isString())
                        .value("text", isString())
                        .value("options", isArray(any()))
                    ))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzes(int count, int user, int page, int indexForCheckingQuizId, int quizNum) {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content",
                        isArray(count,
                            isObject()
                                .value("id", isInteger())
                                .value("completedAt", isString()))

                            .item(indexForCheckingQuizId,
                                isObject()
                                    .value("id", quizNum)
                                    .value("completedAt", isString()))
                    )
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new FatalError(ex.getMessage(), ex);
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/controller/ControllerExceptionHandler.java
  visible: true
  text: |
    package engine.controller;

    import org.springframework.http.HttpStatus;
    import org.springframework.validation.FieldError;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;

    import java.util.HashMap;
    import java.util.NoSuchElementException;

    @RestControllerAdvice
    public class ControllerExceptionHandler {
        private static final String OUT_OF_BOUNDS_MESSAGE = "Element not found";

        @ExceptionHandler(NoSuchElementException.class)
        @ResponseStatus(HttpStatus.NOT_FOUND)
        public HashMap<String, String> handleIndexOutOfBoundsException(Exception e) {
            HashMap<String, String> response = new HashMap<>();
            response.put("message", OUT_OF_BOUNDS_MESSAGE);
            response.put("error", e.getClass().getSimpleName());
            return response;
        }

        @ExceptionHandler(MethodArgumentNotValidException.class)
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        public HashMap<String, String> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
            HashMap<String, String> response = new HashMap<>();
            e.getBindingResult().getAllErrors().forEach((error) -> {
                String fieldName = ((FieldError) error).getField();
                String errorMessage = error.getDefaultMessage();
                response.put(fieldName, errorMessage);
            });

            return response;
        }
    }
  learner_created: true
- name: src/engine/repository/UserRepository.java
  visible: true
  text: |-
    package engine.repository;

    import engine.User;
    import org.springframework.data.jpa.repository.JpaRepository;

    public interface UserRepository extends JpaRepository<User, Integer>{
        User findByEmail(String username);
        User save(User user);
    }
  learner_created: true
- name: src/engine/repository/QuizRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.Quiz;
    import org.springframework.data.repository.CrudRepository;

    public interface QuizRepository extends CrudRepository<Quiz, Integer> {

    }
  learner_created: true
- name: src/engine/service/QuizService.java
  visible: true
  text: |
    package engine.service;

    import engine.Quiz;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    public interface QuizService {
        List<Quiz> getAllQuizzes();

        Quiz getQuizById(int id);

        Quiz addQuiz(Quiz quiz);

        long size();

        void deleteQuiz(int id);
    }
  learner_created: true
- name: src/engine/service/QuizServiceImp.java
  visible: true
  text: |
    package engine.service;

    import engine.Quiz;
    import engine.repository.QuizRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    public class QuizServiceImp implements QuizService{
        @Autowired
        private QuizRepository quizRepository;

        @Override
        public List<Quiz> getAllQuizzes() {
            return (List<Quiz>) quizRepository.findAll();
        }

        @Override
        public Quiz getQuizById(int id) {
            return quizRepository.findById(id).get();
        }

        @Override
        public Quiz addQuiz(Quiz quiz) {
            return quizRepository.save(quiz);
        }

        @Override
        public long size() {
            return quizRepository.count();
        }

        @Override
        public void deleteQuiz(int id) {
            quizRepository.deleteById(id);
        }
    }
  learner_created: true
- name: src/engine/Answer.java
  visible: true
  text: |
    package engine;

    import java.util.HashSet;

    public class Answer {
        private HashSet<Integer> answer;

        public Answer(HashSet<Integer> answer) {
            this.answer = answer;
        }

        public Answer() {}

        public HashSet<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(HashSet<Integer> answer) {
            this.answer = answer;
        }
    }
  learner_created: true
- name: src/engine/MyUserDetails.java
  visible: true
  text: |-
    package engine;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;

    public class MyUserDetails implements UserDetails {

        private User user;
        public MyUserDetails(User user) {
            this.user = user;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return null;
        }

        @Override
        public String getPassword() {
            return user.getPassword();
        }

        @Override
        public String getUsername() {
            return user.getEmail();
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        public User getUser() {
            return user;
        }
    }
  learner_created: true
- name: src/engine/service/MyUserDetailsService.java
  visible: true
  text: |-
    package engine.service;

    import engine.MyUserDetails;
    import engine.User;
    import engine.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    public class MyUserDetailsService implements UserDetailsService {

        @Autowired
        private UserRepository userRepository;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByEmail(username);
            if (user == null) {
                throw new UsernameNotFoundException(username + " not found");
            } else {
                return new MyUserDetails(user);
            }
        }
    }
  learner_created: true
- name: src/engine/AnswerResponse.java
  visible: true
  text: |
    package engine;

    public class AnswerResponse {
        private boolean success;
        private String feedback;

        public AnswerResponse(boolean success, String feedback) {
            this.feedback = feedback;
            this.success = success;
        }

        public String getFeedback() {
            return feedback;
        }

        public boolean getSuccess() {
            return success;
        }

        public void setSuccess(boolean correct) {
            success = correct;
        }

        public void setFeedback(String feedback) {
            this.feedback = feedback;
        }
    }
  learner_created: true
- name: src/engine/configuration/SecurityConfiguration.java
  visible: true
  text: |-
    package engine.configuration;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
        @Autowired
        UserDetailsService userDetailsService;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userDetailsService)
            .passwordEncoder(new BCryptPasswordEncoder());
        }


        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.httpBasic().and()
                    .csrf().disable().headers().frameOptions().disable().and()
                    .authorizeRequests()
                    .antMatchers("/api/quizzes", "/api/quizzes/**").authenticated()
                    .antMatchers("api/register" ,"actuator/shutdown", "api/users").permitAll();
        }
    }
  learner_created: true
- name: src/engine/controller/QuizController.java
  visible: true
  text: |
    package engine.controller;

    import engine.*;
    import engine.repository.UserRepository;
    import engine.service.QuizService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.Collection;
    import java.util.Objects;


    @RestController
    public class QuizController {
        public static final String CORRECT_MESSAGE = "Congratulations, you're right!";
        public static final String WRONG_MESSAGE =  "Wrong answer! Please, try again.";

        @Autowired
        private QuizService quizService;

        @Autowired
        private UserRepository userRepository;

        @PostMapping(value = "/api/quizzes", consumes = "application/json")
        public Quiz addQuiz(@Valid @RequestBody Quiz quiz) {
            MyUserDetails currentUser = (MyUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
            quiz.setUser(currentUser.getUser());
            return quizService.addQuiz(quiz);
        }

        @GetMapping(path = "/api/quizzes/{id}")
        public Quiz getQuiz(@PathVariable int id) {
            return quizService.getQuizById(id);
        }

        @GetMapping(path = "/api/quizzes")
        public Collection<Quiz> getQuizzes() {
            return quizService.getAllQuizzes();
        }

        @PostMapping(value = "/api/quizzes/{id}/solve", consumes = "application/json")
        public AnswerResponse solveQuiz(@PathVariable int id, @RequestBody Answer answer) {
            Quiz q = quizService.getQuizById(id);
            boolean isCorrect = Objects.equals(answer.getAnswer(), q.getAnswer());
            return new AnswerResponse(isCorrect, isCorrect ? CORRECT_MESSAGE : WRONG_MESSAGE);
        }

        @PostMapping(value = "/api/register", consumes = "application/json")
        public User registerUser(@Valid @RequestBody User user) {
            User userFound = userRepository.findByEmail(user.getEmail());
            if (userFound == null) {
                return userRepository.save(user);
            } else {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User already registered");
            }
        }

        @DeleteMapping(value = "/api/quizzes/{id}")
        @ResponseStatus(value = HttpStatus.NO_CONTENT)
        public void deleteQuiz(@PathVariable int id) {
            MyUserDetails currentUser = (MyUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
            Quiz quiz = quizService.getQuizById(id);
            if (quiz.getUser().getId() == currentUser.getUser().getId()) {
                quizService.deleteQuiz(id);
            } else {
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, currentUser.getUsername() + " is not the author of this quiz");
            }
        }

        @GetMapping(path = "/api/users")
        public Collection<User> getUsers() {
            return userRepository.findAll();
        }
    }
  learner_created: true
- name: src/engine/controller/UserController.java
  visible: true
  learner_created: true
- name: src/engine/entity/User.java
  visible: true
  text: |-
    package engine;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.hibernate.validator.constraints.Length;
    import org.springframework.security.crypto.bcrypt.BCrypt;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.List;

    @Entity
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO, generator = "user_id_generator")
        private int id;

        @Email
        @Pattern(regexp = ".+@.+\\..+", message = "Incorrect email format")
        @Column(name = "username", unique = true)
        @NotNull(message = "User can not be null")
        private String email;

        @Length(min = 5, message = "password must be at least 5 chars long")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @OneToMany(mappedBy = "user", cascade = CascadeType.REMOVE)
        private List<Quiz> quizzes;

        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private boolean active;

        public User() {
            this.active = true;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getEmail() {
            return email;
        }

        public boolean isActive() {
            return active;
        }

        public void setActive(boolean active) {
            this.active = active;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password.length() >= 5 ? BCrypt.hashpw(password, BCrypt.gensalt()) : "";
        }

        @Override
        public String toString() {
            return "Username: " + email + "\n"
                    + "Id: " + id;
        }
    }
  learner_created: true
- name: src/engine/entity/Quiz.java
  visible: true
  text: |
    package engine;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.util.HashSet;
    import java.util.List;

    @Entity
    public class Quiz {
        private final static String NOT_EMPTY_MESSAGE = "must not be empty!";

        @NotBlank(message = "Title " + NOT_EMPTY_MESSAGE)
        @Column(nullable = false)
        private String title;

        @NotBlank(message = "Text " + NOT_EMPTY_MESSAGE)
        @Column(nullable = false)
        private String text;

        @NotNull(message = "Options can not be null")
        @Size(min = 2, message = "There must be at least 2 options")
        @Column
        @ElementCollection
        private List<String> options;

        @Column
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private HashSet<Integer> answer;

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO, generator = "quiz_id_generator")
        private int id;

        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @ManyToOne()
        @JoinColumn(name = "user", nullable = false)
        private User user;

        public Quiz(String title, String text, List<String> options, HashSet<Integer> answer) {
            this.title = title;
            this.text = text;
            this.options = options;
            this.answer = answer;
        }

        public Quiz(){
        }

        public String getText() {
            return text;
        }

        public String getTitle() {
            return title;
        }

        public List<String> getOptions() {
            return options;
        }

        public HashSet<Integer> getAnswer() {
            return answer == null ? new HashSet<>() : answer;
        }

        public int getId() {
            return id;
        }

        public User getUser() {
            return user;
        }

        public void setUser(User user) {
            this.user = user;
        }

        public void setAnswer(HashSet<Integer> answer) {
            this.answer = answer;
        }

        public void setId(int id) {
            this.id = id;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        public void setText(String text) {
            this.text = text;
        }

        public void setTitle(String title) {
            this.title = title;
        }

    }
  learner_created: true
- name: src/engine/entity/QuizSolved.java
  visible: true
  learner_created: true
- name: src/engine/repository/QuizSolvedRepository.java
  visible: true
  learner_created: true
- name: src/engine/controller/QuizSolvedController.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/509/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/91/stages/509/implement">JetBrains
    Academy</a>
  time: Mon, 14 Sep 2020 03:50:02 UTC
record: -1
